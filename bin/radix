#!/usr/bin/env ruby
require 'gli'
# begin # XXX: Remove this begin/rescue before distributing your app
require 'radix'
#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/radix now"
#  exit 64
#end

include GLI::App

program_desc 'Pusher based messaging'

version Radix::VERSION

# options
# desc 'Debug'
# 
switch [:d,:debug]

desc 'Configuration'
default_value "#{File.basename(__FILE__)}.yml"
arg_name 'config'
flag [:c,:config]

desc 'Log file'
arg_name 'log'
flag [:l,:log]

desc 'Agent id'
arg_name 'id'
flag [:i,:id]

# commands
desc 'Start radix server'
arg_name ''


command :server do |cmd|
  cmd.action do |global_options,options,args|
    server = Radix::Server.new(@config)
    server_thread = Thread.new { server.run }
    # *-------------------------------------------------------------------
    # Land you at the heart of intrusion
    # -------------------------------------------------------------------*
    if @config[:radix][:pry]
      binding.pry
    else
      server_thread.join
    end
  end
end



desc 'Start radix client'
arg_name ''
command :client do |cmd|
  cmd.action do |global_options,options,args|
    client = Radix::Client.new(@config)
    # bind to control channel onKey event
    client.bind( :control, :onKey ) do |data,chan,event|
      client.onKey( data, chan, event )
    end

    # client.bind(:control,:onExit) do |data,chan,event|
    #  client.onExit(data,chan,event)
    # end

    #client.bind(:control,:onCfg) do |data,chan,event|
    #  client.onCfg(data,chan,event)
    #  # pp client.cfg
    #  puts client.cfg.to_yaml
    #end
    client.run
  end
end


pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  # true

  # read the configuration
  @config = YAML.load( ERB.new( File.read( global[:config] ) ).result )
  # default id
  @config[:radix][:id]  = global[:id]  || command.name.to_s
  # @config[:radix][:log] = global[:log] || command.name.to_s + ".log"
  @config[:radix][:log] = global[:log] if not global[:log].nil?
  # command line options
  {:args=> args, :global=> global, :options=> options}.each { |k,v| @config[k] = v }
end


post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  STDERR.puts exception.backtrace
  true
end

exit run(ARGV)
